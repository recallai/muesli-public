name: Build and Release

on:
    push:
        branches:
            - "release" # Trigger on pushes to release branch
    workflow_dispatch: # Allow manual triggering
        inputs:
            release_type:
                description: "Release type"
                required: true
                default: "release"
                type: choice
                options:
                    - "draft"
                    - "prerelease"
                    - "release"

jobs:
    build:
        strategy:
            matrix:
                os: [windows-latest, macos-latest, ubuntu-latest]

        runs-on: ${{ matrix.os }}

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Build application
              run: npm run build:prod

            # Windows-specific build
            - name: Build Windows app
              if: matrix.os == 'windows-latest'
              run: npm run dist
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # macOS-specific build
            - name: Build macOS app
              if: matrix.os == 'macos-latest'
              run: npm run dist
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  CSC_IDENTITY_AUTO_DISCOVERY: false # Disable code signing for now

            # Linux-specific build
            - name: Build Linux app
              if: matrix.os == 'ubuntu-latest'
              run: npm run dist
              env:
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            # Upload artifacts for each platform
            - name: Upload Windows artifacts
              if: matrix.os == 'windows-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: windows-build
                  path: release/*
                  retention-days: 30

            - name: Upload macOS artifacts
              if: matrix.os == 'macos-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: macos-build
                  path: release/*
                  retention-days: 30

            - name: Upload Linux artifacts
              if: matrix.os == 'ubuntu-latest'
              uses: actions/upload-artifact@v4
              with:
                  name: linux-build
                  path: release/*
                  retention-days: 30

    release:
        needs: build
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/release' || github.event_name == 'workflow_dispatch'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: release-artifacts

            - name: Display structure of downloaded files
              run: find release-artifacts -type f -name "*" | head -20

            - name: Auto-increment release version
              id: tag
              run: |
                  # Get the latest release tag from GitHub API
                  LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "v0.0.0")
                  
                  if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    # For manual trigger, use timestamp-based version
                    echo "tag_name=v$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT
                  else
                    # Auto-increment the patch version
                    if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
                      MAJOR=${BASH_REMATCH[1]}
                      MINOR=${BASH_REMATCH[2]}
                      PATCH=${BASH_REMATCH[3]}
                      NEW_PATCH=$((PATCH + 1))
                      NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
                    else
                      # If no valid tag found, start with v1.0.1
                      NEW_VERSION="v1.0.1"
                    fi
                    
                    echo "tag_name=${NEW_VERSION}" >> $GITHUB_OUTPUT
                    echo "Previous version: $LATEST_TAG"
                    echo "New version: $NEW_VERSION"
                    
                    # Update package.json with new version (without 'v' prefix)
                    NEW_PKG_VERSION=${NEW_VERSION#v}
                    npm version $NEW_PKG_VERSION --no-git-tag-version
                    
                    # Commit the version update
                    git config --local user.email "action@github.com"
                    git config --local user.name "GitHub Action"
                    git add package.json
                    git commit -m "chore: bump version to $NEW_VERSION" || echo "No changes to commit"
                    git push origin ${{ github.ref_name }} || echo "Failed to push version update"
                  fi

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: ${{ steps.tag.outputs.tag_name }}
                  name: Muesli ${{ steps.tag.outputs.tag_name }}
                  body: |
                      ## Muesli Meeting Recorder ${{ steps.tag.outputs.tag_name }}

                      ### üì¶ Downloads

                      **Windows:**
                      - `.exe` - Windows installer (NSIS)
                      - `*-win.zip` - Portable Windows app

                      **macOS:**
                      - `.dmg` - macOS disk image
                      - `*-mac.zip` - Portable macOS app

                      **Linux:**
                      - `.AppImage` - Universal Linux app
                      - `.deb` - Debian/Ubuntu package
                      - `.tar.gz` - Linux archive

                      ### üöÄ Installation

                      1. Download the appropriate file for your operating system
                      2. Run the installer or extract the portable version
                      3. Follow the setup instructions

                      ### üìù Changelog

                      - Enhanced Electron Builder integration
                      - Improved CSS loading and styling
                      - Better error handling for meetings data
                      - Cross-platform compatibility improvements

                      ---

                      Built with ‚ù§Ô∏è using Electron Builder
                  draft: ${{ github.event.inputs.release_type == 'draft' || github.event_name != 'workflow_dispatch' }}
                  prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
                  files: |
                      release-artifacts/**/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
